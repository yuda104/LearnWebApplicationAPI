
@page "/projects/{projectId:int}/tickets"

@inject NavigationManager NavigationManager
@inject ITicketsScreenUseCases TicketsScreenUseCases

@attribute [Authorize]

<h3>Tickets</h3>
<br />

<div class="row">
    <div class="col-auto">
        <input type="text" class="form-control" @bind-value="searchFilter" />
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-light" @onclick="OnSearch">Search</button>
    </div>
    <div class="col-auto">
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="checkbox" id="myticket" @bind-value="ViewMyTickets" />
            <label class="form-check-label" for="myticket">View My Tickets</label>
        </div>
    </div>
</div>
<br />

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Owner</th>
            <th>Description</th>
            <th>Report Date</th>
            <th>Due Date</th>
        </tr>
    </thead>
    <tbody>
        @if (tickets != null)
        {
             @foreach (var ticket in tickets)
             {
                 <TicketRowComponent ticket="ticket"></TicketRowComponent>
             }
        }
    </tbody>
</table>



@code {
    IEnumerable<Ticket> tickets;

    [Parameter]
    public int ProjectId { get; set; }
    string searchFilter;
    bool viewMyTickets = false;
    public bool ViewMyTickets { 
        get => viewMyTickets;
        set
        {
            viewMyTickets = value;
            Task.Run(async () =>
            {
                if (viewMyTickets)
                    tickets = await TicketsScreenUseCases.ViewOwnersTickets(ProjectId, "Strange");
                else 
                    tickets = await TicketsScreenUseCases.ViewTickets(ProjectId);
                StateHasChanged();
            });
            
        }    
    }

    protected override async Task OnParametersSetAsync()
    {
        tickets = await TicketsScreenUseCases.ViewTickets(ProjectId);
    }

    private async Task OnSearch()
    {
        tickets = await TicketsScreenUseCases.SearchTicketsByProjectId(searchFilter, ProjectId);
    }
}
